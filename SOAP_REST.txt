Rerfernce of help links
1. https://maxivak.com/rest-vs-xml-rpc-vs-soap/
2. https://blogs.mulesoft.com/dev/api-dev/apis-versus-web-services/
3. http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/
4. 

Application Communication protocol

Web Service vs API

Web Service:
1) It is a SOAP-based service and returns data as XML.
2) It only supports the HTTP protocol.
3) It is not open source but can be used by any client that understands XML.
5) It requires a SOAP protocol to receive and send data over the network, so it is not a light-weight architecture.

Web API:
1) A Web API is an HTTP based service and returns JSON or XML data by default.
2) It supports the HTTP protocol.
3) It can be hosted within an application or IIS.
4) It is open source and it can be used by any client that understands JSON or XML.
5) It is light-weight architectured and good for devices which have limited bandwidth, like mobile devices.

Web Service :- SOAP, REST, XML-RCP
API (Application Program Interface) : - google API, FB API, etc

Clearly, both are means of communications. 
The difference is that Web Service almost always involves communication over network and HTTP is the most commonly used protocol. 
Web service also uses SOAP, REST, and XML-RPC as a means of communication. 
While an API can use any means of communication e.g. DLL files in C/C++, Jar files/ RMI in java, Interrupts in Linux kernel API etc. 
So, you can say that-

1. Web Service is an API wrapped in HTTP.
2. All Web Services are API but all APIs are not Web Services.
3. Web Service might not perform all the operations that an API would perform.
4. A Web Service needs a network while an API doesn't need a network for its operation.

#What is a web service?
By definition, a web service is any piece of software that makes itself available over the Internet and standardizes its communication via XML encoding. A client invokes a web service by sending a request (usually in the form of an XML message), and the service sends back an XML response. Web services invoke communication over a network, with HTTP as the most common means of connectivity between the two systems. For many, web services are synonymous with SOA (Services Oriented Architecture) and primarily rely on standards such as XML-RPC and SOAP (Simple Object Access Protocol).  One of the primary criticisms of the web services approach is the degree to which the client and server are coupled to one another; an inherent issue whenever a client is remotely calling a procedure (“RPC”) on a distant system.

#Why is a web API not a web service?
In contrast, a typical Web API specifies how software components should interact with each other using the web’s protocol (HTTP) as the go-between. The client doesn’t need to know what procedure to call on the server. Instead, it uses a set of commands (called “verbs”) that are built into HTTP and when the command arrives on the other end, it’s up to the receiving system to know what to do with it. For example, the HTTP verb that’s typically used to retrieve data is “GET”.  When HTTP is used to abstract systems from one another, the systems are considered to be more loosely coupled (when compared to web services) and therefore the entire system is considered less brittle. Another advantage of web APIs (often referred to as RESTful APIs) is flexibility. The client system (usually called the “consumer”) and the serving system (the “provider”) are so independent of one another, that they can each use different languages (Java, Python, Ruby, etc.) for their part of the overall implementation. Additionally, the data payloads can be of multiple types such as JSON or XML. RESTful APIs most typically use the web’s  communication protocol (again, HTTP), but  are not limited in the same way a web service is. For example, CoAP, an HTTP-like protocol that’s common to the Internet of Things, is also considered to be RESTful.

#What is an API?
In contrast, an API specifies how software components should interact with each other. It is a set of protocols and routines, and it’s responses are generally returned as JSON or XML data. APIs can use any type of communication protocol, and are not limited in the same way a web service is.

#What do APIs and web services have in common?
Both web APIs and web services serve as a means of communication between consumers and providers. Both support XML-based data payloads, but JSON is the more common payload type for web APIs. When comparing web services to web APIs, the significance lies in the amount of work that has to be done by the consumers and providers to package and unpackage the data; this is a process known as serialization and deserialization, respectively. Serializing and deserializing JSON in a web API scenario typically requires far less work which, in turn, equates to better performance and fewer compute cycles. This is one reason why web APIs are great for information transfer on mobile devices and tablets; as opposed to on desktops and services, where they have restricted processing environments.
Conversely, web services facilitate interactions between two systems, and almost always depend on an XML-RPC-like interface to communicate with each other. SOAP, the successor to XML-RPC, defines the XML-based exchange mentioned above and is more bound to a client/server architecture.
In terms of what web APIs and web services have in common, both are essentially a means to an end and the same problems can be solved by both. And both can be configured to operate over a network or within a machine.But the approaches of each come with their own pros and cons.  
For now, web services are a service from one device to another; they communicate over the Internet and are optimized for machine-to-machine communication, meaning that machine-readable files and formats (like XML) are easily transferable. APIs are software-to-software interfaces with an abstract set of verbs instructions for accessing web-based applications. Whatever you wanted to accomplish with a web API can be accomplished with a web service; web services are merely predecessors in the evolution of web integration methodologies.



Web Service : 
-Web Services are the key point of Integration for different applications belonging to different Platforms, Languages, systems.
-



1. XML-RPC (Extensible Markup Language - Remote Procedure Call)
-Within the world of XML there are two main ways to implement a Remote Procedure Call (RPC) – XML-RPC and SOAP.
-It’s remote procedure calling using HTTP as the transport and XML as the encoding. 
-XML-RPC is designed to be as simple as possible, while allowing complex data structures to be transmitted, processed and returned.
-
2. SOAP (Simple Object Access protocol)
-SOAP stands for Simple object access protocol
-A XML Based messaging protocol
-Used WSDL(Web Service Description Language)(Which is why it becomes bulky but Secure)
-Invoke services by calling RPC(Remote Procedure Call) Method 
-Does not return Human readable code
-Tranfer over HTTP, also uses other protocols SMPT, FTP, etc
-Javascript can call SOAP but it is difuicult to implement
-Performance is not great as compaired to REST.

SOAP Message :- 
SOAP Message is Ordinary XML document containing
1. Envolop : Defines the start and end of the message. it is mandatory element.
2. Header : Contains any optional attributes of the message used in processing the message, either at an intermediary point or at the ultimate end-point. It is an optional element.
3. Body : Contains the XML data comprising the message being sent. It is a mandatory element.
4. Fault : An optional Fault element that provides information about errors that occur while processing the message.

Ex : 
<?xml version = "1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope" 
   SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding">

   <SOAP-ENV:Header>
      ...
      ...
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      ...
      ...
      <SOAP-ENV:Fault>
         ...
         ...
      </SOAP-ENV:Fault>
      ...
   </SOAP-ENV:Body>
</SOAP_ENV:Envelope>

Envolop : 
The SOAP envelope indicates the start and the end of the message so that the receiver knows when an entire message has been received. 
The SOAP envelope solves the problem of knowing when you are done receiving a message and are ready to process it. 
The SOAP envelope is therefore basically a packaging mechanism.
Every SOAP message has a root Envelope element.
Envelope is a mandatory part of SOAP message.
Every Envelope element must contain exactly one Body element.
If an Envelope contains a Header element, it must contain no more than one, and it must appear as the first child of the Envelope, before the Body.
The envelope changes when SOAP versions change.
The SOAP envelope is specified using the ENV namespace prefix and the Envelope element.
The optional SOAP encoding is also specified using a namespace name and the optional encodingStyle element, which could also point to an encoding style other than the SOAP one.

Header :
The optional Header element offers a flexible framework for specifying additional application-level requirements. 
For example, the Header element can be used to specify a digital signature for password-protected services. Likewise, it can be used to specify an account number for pay-per-use SOAP services.
It is an optional part of a SOAP message.
Header elements can occur multiple times.
Headers are intended to add new features and functionality.
The SOAP header contains header entries defined in a namespace.
The header is encoded as the first immediate child element of the SOAP envelope.
When multiple headers are defined, all immediate child elements of the SOAP header are interpreted as SOAP header blocks.

Body :
The SOAP body is a mandatory element that contains the application-defined XML data being exchanged in the SOAP message. 
The body must be contained within the envelope and must follow any headers that might be defined for the message.
The body is defined as a child element of the envelope, and the semantics for the body are defined in the associated SOAP schema.
The body contains mandatory information intended for the ultimate receiver of the message.

Fault :
If an error occurs during processing, the response to a SOAP message is a SOAP fault element in the body of the message, and the fault is returned to the sender of the SOAP message.
The SOAP fault mechanism returns specific information about the error, including a predefined code, a description, and the address of the SOAP processor that generated the fault.
A SOAP message can carry only one fault block.
Fault is an optional part of a SOAP message.
For HTTP binding, a successful response is linked to the 200 to 299 range of status codes.
SOAP Fault is linked to the 500 to 599 range of status codes.

3. REST (REpresentational State Transfer)
-Representational State Transfer or REST basically means that each unique URL is a representation of some object.
-It is An Architectural style not protocol
-You can get the contents of that object using an HTTP GET, to delete it, you then might use a POST, PUT, or DELETE to modify the object (in practice most of the services use a POST for this).
-It is not necessary to use XML as a data interchange format in REST.
-The format of information(representation) returned can be in XML, JSON, plain text or even in HTML format.
-REST architecture is basically focused on two things : Resources and Interface.
-Resources are application’s state and functionality which is represented by a unique URL. The resources share a uniform interface to transfer the state between the client and server.
-Uses XML, JSON for send/recive
-Simply calls services via URL Path 
-Results are readable which are just XML(Extensible Markup Language)/JSON(JavaScript Object Notation)
-Tranfer is just over HTTP
-Easy to call From JavaScript.
-Performance is great than SOAP.
-REST are not secure we need to make this secure.
-This is light weight unlike SOAP

#REST vs SOAP

SOAP : SOAP is a messaging protocol specification for exchanging structured information in the implementation of web services in computer networks. 

REST : Representational State Transfer is a software architectural style that defines a set of constraints to be used for creating web services. Web services that conform to the REST architectural style, termed RESTful web services, provide interoperability between computer systems on the Internet. 


#The main advantages of REST web services are:
- Lightweight – not a lot of extra xml markup
- Human Readable Results
- Easy to build – no toolkits required

#SOAP also has some advantages:
- Easy to consume – sometimes
- Rigid – type checking, adheres to a contract
- Development tools

REST vs RESTfull 
-Representational state transfer (REST) is a style of software architecture. As described in a dissertation by Roy Fielding, REST is an "architectural style" that basically exploits the existing technology and protocols of the Web.
-RESTful is typically used to refer to web services implementing such an architecture.
-"REST" is an architectural paradigm. "RESTful" describes using that paradigm.

#What is WSDL?
WSDL is an XML format for describing network services as a set of endpoints operating on messages containing either document-oriented or procedure-oriented information. The operations and messages are described abstractly, and then bound to a concrete network protocol and message format to define an endpoint.

SOAP messages are formatted in XML and are typically sent using HTTP (hypertext transfer protocol). SOAP uses WSDL for communication between consumer and provider, whereas REST just uses XML or JSON to send and receive data. ... SOAP builds an XML based protocol on top of HTTP or sometimes TCP/IP.

